from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import sqlite3

ADMIN_USERNAME = "zzitraks"  # Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CHAT_ID = 1037859537  # –í–∞—à chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –°—Ç–∞—Ç—É—Å—ã –¥–ª—è ConversationHandler
SELECT_FLAVOR, QUANTITY, CONTACT_INFO = range(3)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_db():
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        flavor TEXT,
        quantity INTEGER,
        status TEXT DEFAULT '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        contact_info TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_order(user_id, username, flavor, quantity, contact_info):
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO orders (user_id, username, flavor, quantity, contact_info)
    VALUES (?, ?, ?, ?, ?)
    """, (user_id, username, flavor, quantity, contact_info))
    conn.commit()
    order_id = cursor.lastrowid
    conn.close()
    return order_id

def update_order_status(order_id, new_status):
    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
    conn.commit()
    conn.close()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
async def handle_make_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–®–æ–∫–æ–ª–∞–¥", callback_data="flavor_Chocolate")],
        [InlineKeyboardButton("–í–∞–Ω–∏–ª—å", callback_data="flavor_Vanilla")],
        [InlineKeyboardButton("–ö–ª—É–±–Ω–∏–∫–∞", callback_data="flavor_Strawberry")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:", reply_markup=reply_markup)
    return SELECT_FLAVOR

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
async def flavor_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    flavor = query.data.split("_")[1]
    context.user_data['flavor'] = flavor
    await query.answer()
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {flavor}. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    return QUANTITY

# –£–∫–∞–∑–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def collect_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError("Invalid quantity")
        context.user_data['quantity'] = quantity
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):")
        return CONTACT_INFO
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return QUANTITY

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def finalize_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_info = update.message.text
    context.user_data['contact_info'] = contact_info
    user_id = update.effective_user.id
    username = update.effective_user.username
    flavor = context.user_data['flavor']
    quantity = context.user_data['quantity']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_id = add_order(user_id, username, flavor, quantity, contact_info)
    await update.message.reply_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"confirm_{order_id}")],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{order_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    admin_message = (
        f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"ID: {order_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username if username else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        f"–í–∫—É—Å: {flavor}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message, reply_markup=reply_markup)
    return ConversationHandler.END

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, order_id = query.data.split("_")
    order_id = int(order_id)

    if action == "confirm":
        update_order_status(order_id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        user_id = cursor.fetchone()[0]
        conn.close()
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à –∑–∞–∫–∞–∑ —Å ID {order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        await query.edit_message_text(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –ø—Ä–∏–Ω—è—Ç.")
    elif action == "complete":
        update_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        user_id = cursor.fetchone()[0]
        conn.close()
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à –∑–∞–∫–∞–∑ —Å ID {order_id} –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        await query.edit_message_text(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
async def complete_order_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != ADMIN_USERNAME:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        order_id = int(context.args[0])
        update_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ")
        conn = sqlite3.connect('orders.db')
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        user_id = cursor.fetchone()[0]
        conn.close()
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à –∑–∞–∫–∞–∑ —Å ID {order_id} –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        await update.message.reply_text(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.username != ADMIN_USERNAME:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('orders.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, username, flavor, quantity, contact_info, status FROM orders")
    orders = cursor.fetchall()
    conn.close()

    if not orders:
        await update.message.reply_text("–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    response = "üìã –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:\n"
    for order in orders:
        response += (
            f"ID: {order[0]} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{order[1]}\n"
            f"–í–∫—É—Å: {order[2]} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[3]}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {order[4]} | –°—Ç–∞—Ç—É—Å: {order[5]}\n"
            "----------------------\n"
        )
    await update.message.reply_text(response)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    initialize_db()
    app = Application.builder().token("7534331911:AAFlUuVfxM3tr1Lz86Fm-WMfzhI4EkfRYwA").build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('orders', show_orders))
    app.add_handler(CommandHandler('complete_order', complete_order_command))
    app.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(confirm|complete)_"))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_make_order, pattern="make_order")],
        states={
            SELECT_FLAVOR: [CallbackQueryHandler(flavor_selected, pattern="^flavor_")],
            QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_quantity)],
            CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, finalize_order)],
        },
        fallbacks=[],
    )
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()